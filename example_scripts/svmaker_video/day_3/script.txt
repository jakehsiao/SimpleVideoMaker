$ST day_3.txt
第三天
$ST audio_1.mp4 --part 0:00 3:20
第三天主要做的 是对音频的处理
首先是对音频的分割
把录下来的音频
$ST spacing.png
根据话与话之间的停顿
分成一个一个的小部分
然后把这些小部分和稿子里的句子一一对应
$ST audio_1.mp4 --part 31:45 43:48
然而在对应的时候 有时会出现串位的情况
就像这样
我已经念到下一句了
它却还在显示上一句的内容

于是我对算法做了一些调整
只有大于1秒的停顿
才会作为分离的标准

这样就需要在念稿的时候 两句之间要相隔1秒以上

然而这种相隔的度量不好把控
有的时候 只相隔0.8秒左右就念了下一句
$ST presentation.mov
为了更好地把控念稿时 句子之间的时间差
我写了一个辅助程序
这个程序有点像KTV的歌词显示
当我念完一个句子以后
过1秒 下一个句子才会显示出来
使用这种方法录制出的音频
在实际视频制作中 没有出现过串位的情况

$ST params.mp4 --part 0:00 12:17
接下来是给场景切换(ST)指令增加一些参数
目前 只能一整个视频一整个视频地插入
如果只需要视频的一小段
或者需要对视频进行剪裁
就需要参数的帮忙了
$ST params.mp4 --part 12:17 12:49
现在 我们可以用选段和剪裁两种参数
对视频和图片素材的插入 进行更精确地把控了

$ST putting.mp4 --part 0:00 0:20
目前 子模块都写好了
$ST putting.mp4 --part 15:00 15:20
接下来就是皆大欢喜的整合阶段了
$ST putting.mp4 --part 20:40 21:00
把之前分离的代码 都放进一个文件里
$ST putting.mp4 --part 46:37 48:31
然后经过一些调试以后
现在 终于可以用它来做视频了

$ST naotou.png
因为它是用python写的
还需要装额外的库
还需要改配置文件
所以我还没有找到可以一键打包安装的方法
如果大家想用的话
只能自己build
这个难者不会 会者不难了
今后我也会试着找到一键安装的方法的